@page
@model FinanceApp.Web.Pages.IndexModel
@{
    ViewData["Title"] = "BWA Dashboard";
}

<!-- Premium Dashboard Header -->
<div class="dashboard-header mb-5 animate-in">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col-12">
                <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
                    <div class="header-content">
                        <h1 class="heading-1 mb-2 text-premium-primary">
                            <i class="bi bi-speedometer2 me-3"></i>
                            BWA Dashboard
                        </h1>
                        <p class="text-premium-muted mb-0">
                            Professionelle Analyse Ihrer deutschen Betriebswirtschaftlichen Auswertung
                        </p>
                    </div>
                    <div class="header-actions mt-3 mt-md-0">
                        <div class="d-flex gap-2">
                            <span class="badge bg-success-subtle text-success px-3 py-2">
                                <i class="bi bi-shield-check me-1"></i>
                                DSGVO-konform
                            </span>
                            <span class="badge bg-info-subtle text-info px-3 py-2">
                                <i class="bi bi-award me-1"></i>
                                Zertifiziert
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row g-4">
        <!-- Premium Upload Section -->
        <div class="col-lg-6 col-xl-5">
            <div class="card-premium animate-in h-100">
                <div class="card-header border-0 bg-transparent p-4 pb-0">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h3 class="heading-3 mb-1 text-premium-primary">
                                <i class="bi bi-cloud-upload-fill me-2"></i>
                                PDF Import
                            </h3>
                            <p class="text-premium-muted mb-0">Jahresübersicht hochladen</p>
                        </div>
                        <div class="upload-status-indicator">
                            <div class="status-dot bg-success animate-pulse" title="Bereit für Upload"></div>
                        </div>
                    </div>
                </div>
                <div class="card-body p-4">
                    <!-- Premium Alert Messages -->
                    @if (TempData["Success"] != null)
                    {
                        <div class="alert-premium alert-premium-success animate-in mb-4" role="alert">
                            <div class="d-flex align-items-start">
                                <i class="bi bi-check-circle-fill me-3 mt-1 fs-5"></i>
                                <div class="flex-grow-1">
                                    <div class="fw-semibold mb-1">Upload erfolgreich!</div>
                                    <div>@Html.Raw(Html.Encode(TempData["Success"]?.ToString()))</div>
                                </div>
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Schließen"></button>
                            </div>
                        </div>
                    }
                    
                    @if (TempData["Warning"] != null)
                    {
                        <div class="alert-premium alert-premium-warning animate-in mb-4" role="alert">
                            <div class="d-flex align-items-start">
                                <i class="bi bi-exclamation-triangle-fill me-3 mt-1 fs-5"></i>
                                <div class="flex-grow-1">
                                    <div class="fw-semibold mb-1">Hinweis beachten</div>
                                    <div>@Html.Raw(Html.Encode(TempData["Warning"]?.ToString()))</div>
                                </div>
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Schließen"></button>
                            </div>
                        </div>
                    }
                    
                    @if (TempData["Error"] != null)
                    {
                        <div class="alert-premium alert-premium-danger animate-in mb-4" role="alert">
                            <div class="d-flex align-items-start">
                                <i class="bi bi-x-circle-fill me-3 mt-1 fs-5"></i>
                                <div class="flex-grow-1">
                                    <div class="fw-semibold mb-1">Fehler aufgetreten</div>
                                    <div>@Html.Raw(Html.Encode(TempData["Error"]?.ToString()))</div>
                                    <small class="text-muted mt-2 d-block">
                                        Kontaktieren Sie den Support, falls das Problem weiterhin besteht.
                                    </small>
                                </div>
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Schließen"></button>
                            </div>
                        </div>
                    }
                    
                    <!-- Premium Upload Form -->
                    <form method="post" enctype="multipart/form-data" class="needs-validation premium-upload-form" novalidate>
                        @Html.AntiForgeryToken()
                        <!-- Premium File Upload Area -->
                        <div class="upload-area mb-4" id="uploadArea">
                            <div class="upload-zone" id="uploadZone">
                                <div class="upload-content text-center py-5">
                                    <div class="upload-icon mb-3">
                                        <i class="bi bi-file-earmark-pdf display-1 text-premium-secondary"></i>
                                    </div>
                                    <div class="upload-text">
                                        <h5 class="heading-5 mb-2">BWA-Datei hier ablegen</h5>
                                        <p class="text-premium-muted mb-3">
                                            oder <span class="text-premium-primary fw-medium">klicken zum Auswählen</span>
                                        </p>
                                        <div class="upload-requirements">
                                            <small class="text-xs text-premium-muted">
                                                <i class="bi bi-info-circle me-1"></i>
                                                Unterstützte Formate: PDF | Max. Größe: 10 MB
                                            </small>
                                        </div>
                                    </div>
                                </div>
                                <input type="file" class="form-control-premium d-none" id="pdfFile" name="pdfFile" 
                                       accept=".pdf" required>
                            </div>
                            
                            <!-- File Preview Area -->
                            <div class="file-preview d-none" id="filePreview">
                                <div class="d-flex align-items-center p-3 border rounded-3 bg-light">
                                    <div class="file-icon me-3">
                                        <i class="bi bi-file-earmark-pdf fs-3 text-danger"></i>
                                    </div>
                                    <div class="file-info flex-grow-1">
                                        <div class="file-name fw-medium" id="fileName"></div>
                                        <div class="file-size text-premium-muted text-sm" id="fileSize"></div>
                                        <div class="upload-progress mt-2" style="display: none;">
                                            <div class="progress" style="height: 4px;">
                                                <div class="progress-bar bg-premium-gradient" style="width: 0%"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <button type="button" class="btn btn-sm btn-outline-danger" id="removeFile">
                                        <i class="bi bi-x"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Validation Messages -->
                            <div class="invalid-feedback mt-2">
                                <i class="bi bi-exclamation-triangle me-1"></i>
                                Bitte wählen Sie eine gültige PDF-Datei aus.
                            </div>
                        </div>
                        
                        <!-- Premium Submit Button -->
                        <div class="d-grid">
                            <button type="submit" class="btn-premium btn-premium-primary btn-lg" id="submitBtn" disabled>
                                <div class="btn-content">
                                    <i class="bi bi-cloud-upload me-2"></i>
                                    <span>BWA-Daten importieren</span>
                                </div>
                                <div class="btn-loading d-none">
                                    <div class="loading-spinner me-2"></div>
                                    <span>Wird verarbeitet...</span>
                                </div>
                            </button>
                        </div>
                        
                        <!-- Security Notice -->
                        <div class="security-notice mt-3 p-3 bg-light rounded-3">
                            <div class="d-flex align-items-start">
                                <i class="bi bi-shield-check text-success me-2 mt-1"></i>
                                <div>
                                    <small class="text-premium-muted">
                                        <strong>Datenschutz:</strong> Ihre Daten werden ausschließlich zur BWA-Analyse verwendet 
                                        und nach der Verarbeitung sicher gelöscht. DSGVO-konform.
                                    </small>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
            
        <!-- Premium Dashboard Charts and Analytics -->
        <div class="col-lg-6 col-xl-7">
            @if (Model.MonthlySummaries != null && Model.MonthlySummaries.Any())
            {
                <!-- Premium Chart Section -->
                <div class="card-premium animate-in h-100">
                    <div class="card-header border-0 bg-transparent p-4 pb-0">
                        <div class="d-flex align-items-center justify-content-between">
                            <div>
                                <h3 class="heading-3 mb-1 text-premium-primary">
                                    <i class="bi bi-graph-up me-2"></i>
                                    Entwicklung Erlöse vs. Kosten
                                </h3>
                                <p class="text-premium-muted mb-0">Monatlicher Trend Ihrer BWA-Daten</p>
                            </div>
                            <div class="chart-actions">
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-sm btn-premium-outline" id="chartFullscreen" title="Vollbild">
                                        <i class="bi bi-arrows-fullscreen"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-premium-outline" id="chartExport" title="Export">
                                        <i class="bi bi-download"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-4">
                        <div class="chart-container-premium mb-3">
                            <div class="chart-legend mb-3">
                                <div class="d-flex justify-content-center gap-4">
                                    <div class="legend-item d-flex align-items-center">
                                        <div class="legend-color bg-success me-2" style="width: 12px; height: 12px; border-radius: 50%;"></div>
                                        <small class="text-premium-muted">Erlöse</small>
                                    </div>
                                    <div class="legend-item d-flex align-items-center">
                                        <div class="legend-color bg-danger me-2" style="width: 12px; height: 12px; border-radius: 50%;"></div>
                                        <small class="text-premium-muted">Kosten</small>
                                    </div>
                                </div>
                            </div>
                            <div class="chart-wrapper" style="position: relative; height: 350px;">
                                <canvas id="financeChart"></canvas>
                            </div>
                        </div>
                        
                        <!-- Quick Insights -->
                        <div class="quick-insights mt-4">
                            <div class="row g-3">
                                <div class="col-4">
                                    <div class="insight-item text-center p-3 rounded-3 bg-light">
                                        <div class="insight-value fw-bold text-success">
                                            €@Model.MonthlySummaries.Sum(s => s.TotalRevenue).ToString("N0")
                                        </div>
                                        <div class="insight-label text-xs text-premium-muted">Gesamt-Erlöse</div>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="insight-item text-center p-3 rounded-3 bg-light">
                                        <div class="insight-value fw-bold text-danger">
                                            €@Model.MonthlySummaries.Sum(s => s.TotalExpenses).ToString("N0")
                                        </div>
                                        <div class="insight-label text-xs text-premium-muted">Gesamt-Kosten</div>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="insight-item text-center p-3 rounded-3 bg-light">
                                        <div class="insight-value fw-bold @(Model.MonthlySummaries.Sum(s => s.NetResult) >= 0 ? "text-success" : "text-danger")">
                                            €@Model.MonthlySummaries.Sum(s => s.NetResult).ToString("N0")
                                        </div>
                                        <div class="insight-label text-xs text-premium-muted">Netto-Ergebnis</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Empty State for Charts -->
                <div class="card-premium animate-in h-100 d-flex align-items-center justify-content-center">
                    <div class="text-center py-5">
                        <div class="empty-state-icon mb-4">
                            <i class="bi bi-graph-up display-1 text-premium-muted opacity-50"></i>
                        </div>
                        <h4 class="heading-4 text-premium-muted">Noch keine Daten</h4>
                        <p class="text-premium-muted mb-4">
                            Laden Sie eine BWA-Datei hoch, um Ihre Finanzdaten zu analysieren.
                        </p>
                        <div class="features-preview">
                            <div class="row text-start">
                                <div class="col-6">
                                    <div class="feature-item mb-2">
                                        <i class="bi bi-graph-up-arrow text-success me-2"></i>
                                        <small>Trend-Analyse</small>
                                    </div>
                                    <div class="feature-item mb-2">
                                        <i class="bi bi-pie-chart text-info me-2"></i>
                                        <small>Kosten-Aufschlüsselung</small>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="feature-item mb-2">
                                        <i class="bi bi-calculator text-warning me-2"></i>
                                        <small>KPI-Dashboard</small>
                                    </div>
                                    <div class="feature-item mb-2">
                                        <i class="bi bi-download text-secondary me-2"></i>
                                        <small>Export-Funktionen</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    
    <!-- Premium Summary Table Section -->
    @if (Model.MonthlySummaries != null && Model.MonthlySummaries.Any())
    {
        <div class="row mt-5">
            <div class="col-12">
                <div class="card-premium animate-in">
                    <div class="card-header border-0 bg-transparent p-4 pb-0">
                        <div class="d-flex align-items-center justify-content-between">
                            <div>
                                <h3 class="heading-3 mb-1 text-premium-primary">
                                    <i class="bi bi-table me-2"></i>
                                    Monatliche Übersicht
                                </h3>
                                <p class="text-premium-muted mb-0">Detaillierte BWA-Auswertung nach Monaten</p>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-4">
                        <div class="table-responsive">
                            <table class="table-premium">
                                <thead>
                                    <tr>
                                        <th class="border-0">
                                            <div class="d-flex align-items-center">
                                                <i class="bi bi-calendar3 me-2"></i>
                                                Monat
                                            </div>
                                        </th>
                                        <th class="text-end border-0">
                                            <div class="d-flex align-items-center justify-content-end">
                                                <i class="bi bi-arrow-up-circle text-success me-2"></i>
                                                Erlöse
                                            </div>
                                        </th>
                                        <th class="text-end border-0">
                                            <div class="d-flex align-items-center justify-content-end">
                                                <i class="bi bi-arrow-down-circle text-danger me-2"></i>
                                                Kosten
                                            </div>
                                        </th>
                                        <th class="text-end border-0">
                                            <div class="d-flex align-items-center justify-content-end">
                                                <i class="bi bi-calculator me-2"></i>
                                                Netto
                                            </div>
                                        </th>
                                        <th class="text-end border-0">
                                            <div class="d-flex align-items-center justify-content-end">
                                                <i class="bi bi-list-ol me-2"></i>
                                                Positionen
                                            </div>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var summary in Model.MonthlySummaries)
                                    {
                                        <tr class="animate-in" style="animation-delay: @(Model.MonthlySummaries.ToList().IndexOf(summary) * 10)ms;">
                                            <td class="fw-medium">
                                                <div class="d-flex align-items-center">
                                                    <div class="month-indicator me-2 rounded-circle bg-light p-2" style="width: 32px; height: 32px; display: flex; align-items: center; justify-content: center;">
                                                        <small class="fw-bold text-premium-primary">@summary.MonthName.Substring(0, 3)</small>
                                                    </div>
                                                    @Html.Raw(Html.Encode(summary.MonthName))
                                                </div>
                                            </td>
                                            <td class="text-end">
                                                <div class="currency-positive font-mono">
                                                    €@summary.TotalRevenue.ToString("N2")
                                                </div>
                                            </td>
                                            <td class="text-end">
                                                <div class="currency-negative font-mono">
                                                    €@summary.TotalExpenses.ToString("N2")
                                                </div>
                                            </td>
                                            <td class="text-end">
                                                <div class="fw-bold font-mono @(summary.NetResult >= 0 ? "currency-positive" : "currency-negative")">
                                                    €@summary.NetResult.ToString("N2")
                                                </div>
                                            </td>
                                            <td class="text-end">
                                                <span class="badge bg-neutral-subtle text-neutral px-2 py-1">
                                                    @summary.TransactionCount
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr class="border-top-2 fw-bold">
                                        <td class="py-3 fw-bold text-premium-primary">
                                            <i class="bi bi-sigma me-2"></i>
                                            Gesamt
                                        </td>
                                        <td class="text-end py-3">
                                            <div class="currency-positive font-mono fw-bold">
                                                €@Model.MonthlySummaries.Sum(s => s.TotalRevenue).ToString("N2")
                                            </div>
                                        </td>
                                        <td class="text-end py-3">
                                            <div class="currency-negative font-mono fw-bold">
                                                €@Model.MonthlySummaries.Sum(s => s.TotalExpenses).ToString("N2")
                                            </div>
                                        </td>
                                        <td class="text-end py-3">
                                            <div class="fw-bold font-mono fs-5 @(Model.MonthlySummaries.Sum(s => s.NetResult) >= 0 ? "currency-positive" : "currency-negative")">
                                                €@Model.MonthlySummaries.Sum(s => s.NetResult).ToString("N2")
                                            </div>
                                        </td>
                                        <td class="text-end py-3">
                                            <span class="badge bg-premium-gradient text-white px-3 py-2">
                                                @Model.MonthlySummaries.Sum(s => s.TransactionCount)
                                            </span>
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        
                        <!-- Action Buttons -->
                        <div class="d-flex flex-column flex-sm-row gap-3 mt-4 pt-3 border-top">
                            <a href="/Transactions" class="btn-premium btn-premium-primary">
                                <i class="bi bi-list-ul me-2"></i>
                                <span>Alle Transaktionen anzeigen</span>
                            </a>
                            <a href="/PositionTrends" class="btn-premium btn-premium-outline">
                                <i class="bi bi-graph-up-arrow me-2"></i>
                                <span>BWA Trends analysieren</span>
                            </a>
                            <button type="button" class="btn-premium btn-premium-secondary" data-bs-toggle="modal" data-bs-target="#csvExportModal">
                                <i class="bi bi-download me-2"></i>
                                <span>Daten exportieren</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Premium CSV Export Modal -->
<div class="modal fade" id="csvExportModal" tabindex="-1" aria-labelledby="csvExportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content modal-premium">
            <div class="modal-header border-0 pb-0">
                <div class="d-flex align-items-center">
                    <div class="modal-icon me-3">
                        <i class="bi bi-download fs-4 text-premium-primary"></i>
                    </div>
                    <div>
                        <h5 class="modal-title heading-4 mb-1" id="csvExportModalLabel">BWA-Daten exportieren</h5>
                        <p class="text-premium-muted mb-0 text-sm">Konfigurieren Sie Ihren CSV-Export nach Ihren Anforderungen</p>
                    </div>
                </div>
                <button type="button" class="btn-close btn-close-premium" data-bs-dismiss="modal" aria-label="Schließen"></button>
            </div>
            
            <div class="modal-body p-4">
                <form id="csvExportForm" class="needs-validation" novalidate>
                    @Html.AntiForgeryToken()
                    <!-- Date Range Section -->
                    <div class="export-section mb-4">
                        <div class="section-header mb-3">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-calendar-range text-premium-primary me-2"></i>
                                <h6 class="heading-6 mb-0">Zeitraum auswählen</h6>
                            </div>
                        </div>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="startDate" class="form-label text-premium-secondary fw-medium">Von</label>
                                <div class="input-group-premium">
                                    <span class="input-group-icon">
                                        <i class="bi bi-calendar3"></i>
                                    </span>
                                    <input type="date" class="form-control-premium" id="startDate" name="startDate" required>
                                </div>
                                <div class="invalid-feedback">
                                    <i class="bi bi-exclamation-triangle me-1"></i>
                                    Bitte wählen Sie ein Startdatum aus.
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label for="endDate" class="form-label text-premium-secondary fw-medium">Bis</label>
                                <div class="input-group-premium">
                                    <span class="input-group-icon">
                                        <i class="bi bi-calendar-check"></i>
                                    </span>
                                    <input type="date" class="form-control-premium" id="endDate" name="endDate" required>
                                </div>
                                <div class="invalid-feedback">
                                    <i class="bi bi-exclamation-triangle me-1"></i>
                                    Bitte wählen Sie ein Enddatum aus.
                                </div>
                            </div>
                        </div>
                        <div class="date-range-info mt-2">
                            <small class="text-premium-muted">
                                <i class="bi bi-info-circle me-1"></i>
                                Verfügbare Daten: <span id="availableDateRange" class="fw-medium"></span>
                            </small>
                        </div>
                    </div>
                    
                    <!-- Transaction Type Section -->
                    <div class="export-section mb-4">
                        <div class="section-header mb-3">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-funnel text-premium-primary me-2"></i>
                                <h6 class="heading-6 mb-0">Transaktionstypen</h6>
                            </div>
                        </div>
                        <div class="checkbox-group-premium">
                            <div class="form-check-premium">
                                <input class="form-check-input" type="checkbox" value="revenue" id="includeRevenue" name="transactionTypes" checked>
                                <label class="form-check-label" for="includeRevenue">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-arrow-up-circle text-success me-2"></i>
                                        <span>Erlöse einbeziehen</span>
                                    </div>
                                </label>
                            </div>
                            <div class="form-check-premium">
                                <input class="form-check-input" type="checkbox" value="expenses" id="includeExpenses" name="transactionTypes" checked>
                                <label class="form-check-label" for="includeExpenses">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-arrow-down-circle text-danger me-2"></i>
                                        <span>Kosten einbeziehen</span>
                                    </div>
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Export Format Section -->
                    <div class="export-section mb-4">
                        <div class="section-header mb-3">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-file-earmark-text text-premium-primary me-2"></i>
                                <h6 class="heading-6 mb-0">Export-Format</h6>
                            </div>
                        </div>
                        <div class="format-toggle">
                            <div class="btn-group-premium" role="group" aria-label="Export format selection">
                                <input type="radio" class="btn-check" name="exportFormat" id="standardCsv" value="standard" autocomplete="off" checked>
                                <label class="btn btn-premium-toggle" for="standardCsv">
                                    <i class="bi bi-filetype-csv me-2"></i>
                                    Standard CSV
                                </label>
                                
                                <input type="radio" class="btn-check" name="exportFormat" id="germanExcel" value="german" autocomplete="off">
                                <label class="btn btn-premium-toggle" for="germanExcel">
                                    <i class="bi bi-file-earmark-excel me-2"></i>
                                    German Excel
                                </label>
                            </div>
                        </div>
                        <div class="format-description mt-2">
                            <small class="text-premium-muted">
                                <span id="formatDescription">Komma-getrennte Werte mit Punkt als Dezimaltrennzeichen</span>
                            </small>
                        </div>
                    </div>
                    
                    <!-- Preview Section -->
                    <div class="export-section">
                        <div class="section-header mb-3">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-eye text-premium-primary me-2"></i>
                                <h6 class="heading-6 mb-0">Vorschau</h6>
                            </div>
                        </div>
                        <div class="preview-card">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <div class="preview-label text-premium-muted">Geschätzte Datensätze:</div>
                                    <div class="preview-value" id="estimatedRecords">
                                        <span class="loading-spinner-sm me-2"></span>
                                        Wird berechnet...
                                    </div>
                                </div>
                                <div class="preview-icon">
                                    <i class="bi bi-file-earmark-spreadsheet fs-3 text-premium-secondary"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            
            <div class="modal-footer border-0 pt-0">
                <div class="d-flex justify-content-between align-items-center w-100">
                    <div class="export-info">
                        <small class="text-premium-muted">
                            <i class="bi bi-shield-check text-success me-1"></i>
                            Sichere Übertragung - DSGVO-konform
                        </small>
                    </div>
                    <div class="modal-actions">
                        <button type="button" class="btn-premium btn-premium-outline me-2" data-bs-dismiss="modal">
                            <i class="bi bi-x-circle me-2"></i>
                            <span>Abbrechen</span>
                        </button>
                        <button type="submit" form="csvExportForm" class="btn-premium btn-premium-primary" id="exportButton">
                            <div class="btn-content">
                                <i class="bi bi-download me-2"></i>
                                <span>Export starten</span>
                            </div>
                            <div class="btn-loading d-none">
                                <div class="loading-spinner me-2"></div>
                                <span id="loadingText">Export wird vorbereitet...</span>
                            </div>
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Progress Overlay -->
            <div class="export-progress-overlay d-none" id="exportProgressOverlay">
                <div class="progress-content">
                    <div class="progress-icon mb-3">
                        <div class="progress-circle">
                            <svg viewBox="0 0 36 36" class="circular-chart">
                                <path class="circle-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"></path>
                                <path class="circle" stroke-dasharray="0, 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"></path>
                            </svg>
                            <div class="progress-percentage" id="progressPercentage">0%</div>
                        </div>
                    </div>
                    <h5 class="progress-title">Export läuft...</h5>
                    <p class="progress-description text-premium-muted" id="progressDescription">
                        Ihre Daten werden verarbeitet und zum Download vorbereitet.
                    </p>
                    <div class="progress-stats mt-3">
                        <div class="row text-center">
                            <div class="col-4">
                                <div class="stat-value" id="processedRecords">0</div>
                                <div class="stat-label">Verarbeitet</div>
                            </div>
                            <div class="col-4">
                                <div class="stat-value" id="totalRecords">0</div>
                                <div class="stat-label">Gesamt</div>
                            </div>
                            <div class="col-4">
                                <div class="stat-value" id="estimatedTime">--</div>
                                <div class="stat-label">Verbleibend</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Load Chart Memory Manager first -->
    <script src="~/js/ChartMemoryManager.js"></script>
    
    @if (Model.MonthlySummaries != null && Model.MonthlySummaries.Any())
    {
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            /**
             * Premium BWA Dashboard Chart with Memory Management
             * Enhanced visualization for German financial data with memory leak prevention
             */
            document.addEventListener('DOMContentLoaded', function() {
                const ctx = document.getElementById('financeChart').getContext('2d');
                
                // Create optimized chart configuration using memory manager
                const chartConfig = window.chartMemoryManager.createOptimizedConfig('line', {
                    data: {
                        labels: @Html.Raw(Model.ChartLabelsJson),
                        datasets: [{
                            label: 'Erlöse',
                            data: @Html.Raw(Model.RevenueDataJson),
                            borderColor: '#0d5d2e',
                            backgroundColor: 'rgba(13, 93, 46, 0.1)',
                            borderWidth: 3,
                            fill: true,
                            tension: 0.3,
                            pointBackgroundColor: '#0d5d2e',
                            pointBorderColor: '#ffffff',
                            pointBorderWidth: 2,
                            pointRadius: 6,
                            pointHoverRadius: 8,
                            pointHoverBackgroundColor: '#28a745',
                            pointHoverBorderColor: '#ffffff',
                            pointHoverBorderWidth: 3
                        }, {
                            label: 'Kosten',
                            data: @Html.Raw(Model.ExpenseDataJson),
                            borderColor: '#8b1538',
                            backgroundColor: 'rgba(139, 21, 56, 0.1)',
                            borderWidth: 3,
                            fill: true,
                            tension: 0.3,
                            pointBackgroundColor: '#8b1538',
                            pointBorderColor: '#ffffff',
                            pointBorderWidth: 2,
                            pointRadius: 6,
                            pointHoverRadius: 8,
                            pointHoverBackgroundColor: '#dc3545',
                            pointHoverBorderColor: '#ffffff',
                            pointHoverBorderWidth: 3
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        interaction: {
                            intersect: false,
                            mode: 'index'
                        },
                        plugins: {
                            legend: {
                                display: false // Hidden as we have custom legend
                            },
                            tooltip: {
                                backgroundColor: 'rgba(248, 250, 252, 0.95)',
                                titleColor: '#1e293b',
                                bodyColor: '#475569',
                                borderColor: '#e2e8f0',
                                borderWidth: 1,
                                cornerRadius: 12,
                                padding: 12,
                                displayColors: true,
                                usePointStyle: true,
                                callbacks: {
                                    title: function(context) {
                                        return 'Monat: ' + context[0].label;
                                    },
                                    label: function(context) {
                                        const value = new Intl.NumberFormat('de-DE', {
                                            style: 'currency',
                                            currency: 'EUR',
                                            minimumFractionDigits: 2
                                        }).format(context.parsed.y);
                                        return context.dataset.label + ': ' + value;
                                    }
                                }
                            }
                        },
                        scales: {
                            x: {
                                display: true,
                                border: {
                                    color: '#e2e8f0',
                                    width: 1
                                },
                                grid: {
                                    display: false
                                },
                                ticks: {
                                    color: '#64748b',
                                    font: {
                                        family: 'Inter, sans-serif',
                                        size: 11,
                                        weight: '500'
                                    },
                                    padding: 8
                                }
                            },
                            y: {
                                display: true,
                                beginAtZero: true,
                                border: {
                                    color: '#e2e8f0',
                                    width: 1
                                },
                                grid: {
                                    color: '#f1f5f9',
                                    drawBorder: false
                                },
                                ticks: {
                                    color: '#64748b',
                                    font: {
                                        family: 'Inter, sans-serif',
                                        size: 11,
                                        weight: '500'
                                    },
                                    padding: 12,
                                    callback: function(value) {
                                        // Format as German currency
                                        return new Intl.NumberFormat('de-DE', {
                                            style: 'currency',
                                            currency: 'EUR',
                                            minimumFractionDigits: 0,
                                            maximumFractionDigits: 0
                                        }).format(value);
                                    }
                                }
                            }
                        }
                    }
                });
                
                // Create chart instance with memory management
                const financeChart = new Chart(ctx, chartConfig);
                
                // Register chart for proper memory management
                window.chartMemoryManager.registerChart('financeChart', financeChart, ctx.canvas);
                
                // Chart export functionality
                document.getElementById('chartExport')?.addEventListener('click', function() {
                    const link = document.createElement('a');
                    link.download = 'bwa-dashboard-chart.png';
                    link.href = financeChart.toBase64Image('image/png', 1.0);
                    link.click();
                });
                
                // Chart fullscreen functionality
                document.getElementById('chartFullscreen')?.addEventListener('click', function() {
                    const chartContainer = document.querySelector('.chart-container-premium');
                    if (chartContainer && chartContainer.requestFullscreen) {
                        chartContainer.requestFullscreen().catch(err => {
                            console.log('Fullscreen not supported:', err);
                        });
                    }
                });
                
                // Update chart when data changes (if needed for dynamic updates)
                window.updateFinanceChart = function(newData) {
                    window.chartMemoryManager.updateChart('financeChart', newData);
                };
                
                console.log('BWA Dashboard Chart initialized with memory management ✨');
            });
        </script>
    }
    
    <!-- Premium Upload Interface Script with Security Enhancements -->
    <script>
        /**
         * Premium Upload Interface with Enhanced Security
         * File validation and sanitization for German BWA documents
         */
        document.addEventListener('DOMContentLoaded', function() {
            const uploadZone = document.getElementById('uploadZone');
            const fileInput = document.getElementById('pdfFile');
            const filePreview = document.getElementById('filePreview');
            const fileName = document.getElementById('fileName');
            const fileSize = document.getElementById('fileSize');
            const removeFileBtn = document.getElementById('removeFile');
            const submitBtn = document.getElementById('submitBtn');
            const uploadArea = document.getElementById('uploadArea');
            
            // Security: Allowed file types and maximum size
            const ALLOWED_TYPES = ['application/pdf'];
            const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
            const ALLOWED_EXTENSIONS = ['.pdf'];
            
            // Drag and drop functionality with security checks
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                uploadZone.addEventListener(eventName, preventDefaults, false);
                document.body.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            // Highlight drop area when item is dragged over
            ['dragenter', 'dragover'].forEach(eventName => {
                uploadZone.addEventListener(eventName, highlight, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                uploadZone.addEventListener(eventName, unhighlight, false);
            });
            
            function highlight(e) {
                uploadZone.classList.add('drag-over');
                uploadZone.style.borderColor = 'var(--color-primary)';
                uploadZone.style.backgroundColor = 'var(--color-primary-alpha)';
            }
            
            function unhighlight(e) {
                uploadZone.classList.remove('drag-over');
                uploadZone.style.borderColor = '';
                uploadZone.style.backgroundColor = '';
            }
            
            // Handle dropped files with security validation
            uploadZone.addEventListener('drop', handleDrop, false);
            
            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                handleFiles(files);
            }
            
            // Handle file selection via click
            uploadZone.addEventListener('click', () => fileInput.click());
            fileInput.addEventListener('change', (e) => handleFiles(e.target.files));
            
            function handleFiles(files) {
                if (files.length === 0) return;
                
                const file = files[0];
                
                // Security validation
                if (!validateFile(file)) {
                    return;
                }
                
                // Show file preview
                showFilePreview(file);
                enableSubmitButton();
            }
            
            /**
             * Comprehensive file validation for security
             */
            function validateFile(file) {
                // Check file type
                if (!ALLOWED_TYPES.includes(file.type)) {
                    showError('Ungültiger Dateityp. Nur PDF-Dateien sind erlaubt.');
                    return false;
                }
                
                // Check file extension
                const extension = '.' + file.name.split('.').pop().toLowerCase();
                if (!ALLOWED_EXTENSIONS.includes(extension)) {
                    showError('Ungültige Dateiendung. Bitte wählen Sie eine .pdf Datei aus.');
                    return false;
                }
                
                // Check file size
                if (file.size > MAX_FILE_SIZE) {
                    showError(`Datei ist zu groß. Maximum: ${MAX_FILE_SIZE / (1024 * 1024)} MB.`);
                    return false;
                }
                
                // Check for empty files
                if (file.size === 0) {
                    showError('Die Datei ist leer. Bitte wählen Sie eine gültige PDF-Datei aus.');
                    return false;
                }
                
                // Sanitize filename for security
                const sanitizedName = sanitizeFilename(file.name);
                if (sanitizedName !== file.name) {
                    console.log('Filename sanitized for security');
                }
                
                return true;
            }
            
            /**
             * Sanitize filename to prevent path traversal attacks
             */
            function sanitizeFilename(filename) {
                return filename
                    .replace(/[^a-zA-Z0-9._-]/g, '_') // Remove dangerous characters
                    .replace(/_{2,}/g, '_') // Replace multiple underscores
                    .substring(0, 255); // Limit length
            }
            
            function showFilePreview(file) {
                // Use sanitized filename for display
                fileName.textContent = sanitizeFilename(file.name);
                fileSize.textContent = formatFileSize(file.size);
                
                document.querySelector('.upload-content').style.display = 'none';
                filePreview.classList.remove('d-none');
                
                // Animate preview appearance
                filePreview.style.opacity = '0';
                filePreview.style.transform = 'translateY(10px)';
                setTimeout(() => {
                    filePreview.style.transition = 'all 0.3s ease';
                    filePreview.style.opacity = '1';
                    filePreview.style.transform = 'translateY(0)';
                }, 100);
            }
            
            function hideFilePreview() {
                document.querySelector('.upload-content').style.display = 'block';
                filePreview.classList.add('d-none');
                fileInput.value = '';
                disableSubmitButton();
                hideError();
            }
            
            function enableSubmitButton() {
                submitBtn.disabled = false;
                submitBtn.classList.add('btn-ready');
            }
            
            function disableSubmitButton() {
                submitBtn.disabled = true;
                submitBtn.classList.remove('btn-ready');
            }
            
            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }
            
            function showError(message) {
                const feedback = uploadArea.querySelector('.invalid-feedback');
                // Sanitize error message for display
                feedback.textContent = message.replace(/<[^>]*>/g, '');
                uploadArea.classList.add('is-invalid');
                setTimeout(() => hideError(), 8000); // Show longer for important security messages
            }
            
            function hideError() {
                uploadArea.classList.remove('is-invalid');
            }
            
            // Remove file functionality
            removeFileBtn.addEventListener('click', hideFilePreview);
            
            // Enhanced form submission with progress tracking
            document.querySelector('.premium-upload-form').addEventListener('submit', function(e) {
                const btnContent = submitBtn.querySelector('.btn-content');
                const btnLoading = submitBtn.querySelector('.btn-loading');
                
                btnContent.classList.add('d-none');
                btnLoading.classList.remove('d-none');
                
                // Show upload progress
                const progressBar = document.querySelector('.upload-progress .progress-bar');
                if (progressBar) {
                    document.querySelector('.upload-progress').style.display = 'block';
                    let progress = 0;
                    const interval = setInterval(() => {
                        progress += Math.random() * 15;
                        if (progress > 90) progress = 90;
                        progressBar.style.width = progress + '%';
                    }, 200);
                    
                    // Clear interval after reasonable time
                    setTimeout(() => {
                        clearInterval(interval);
                        progressBar.style.width = '100%';
                    }, 8000);
                }
                
                // Security: Disable further file changes during upload
                fileInput.disabled = true;
                uploadZone.style.pointerEvents = 'none';
            });
            
            // Form validation with security considerations
            (function () {
                'use strict'
                var forms = document.querySelectorAll('.needs-validation')
                Array.prototype.slice.call(forms)
                    .forEach(function (form) {
                        form.addEventListener('submit', function (event) {
                            if (!form.checkValidity()) {
                                event.preventDefault()
                                event.stopPropagation()
                                showError('Bitte korrigieren Sie die Eingaben und versuchen Sie es erneut.');
                            }
                            form.classList.add('was-validated')
                        }, false)
                    })
            })();
            
            console.log('Secure Upload Interface initialized ✨');
        });
        
    </script>
    
    <!-- Premium CSV Export Modal Script -->
    <script>
        /**
         * Premium CSV Export Modal with Sophisticated Interactions
         * German financial data export with enhanced UX and security
         */
        document.addEventListener('DOMContentLoaded', function() {
            const csvExportModal = document.getElementById('csvExportModal');
            const exportForm = document.getElementById('csvExportForm');
            const exportButton = document.getElementById('exportButton');
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            const availableDateRange = document.getElementById('availableDateRange');
            const estimatedRecords = document.getElementById('estimatedRecords');
            const formatDescription = document.getElementById('formatDescription');
            const progressOverlay = document.getElementById('exportProgressOverlay');
            
            // Available date range from server data
            const availableData = @Html.Raw(Json.Serialize(Model.MonthlySummaries?.Select(s => new { 
                year = s.Year, 
                month = s.Month, 
                count = s.TransactionCount 
            }).ToArray() ?? new object[0]));
            
            // Initialize date range
            function initializeDateRange() {
                if (availableData && availableData.length > 0) {
                    const minDate = availableData.reduce((min, item) => 
                        new Date(item.year, item.month - 1) < new Date(min.year, min.month - 1) ? item : min);
                    const maxDate = availableData.reduce((max, item) => 
                        new Date(item.year, item.month - 1) > new Date(max.year, max.month - 1) ? item : max);
                    
                    const minDateStr = `${minDate.year}-${String(minDate.month).padStart(2, '0')}-01`;
                    const maxDateStr = `${maxDate.year}-${String(maxDate.month).padStart(2, '0')}-${new Date(maxDate.year, maxDate.month, 0).getDate()}`;
                    
                    startDateInput.value = minDateStr;
                    endDateInput.value = maxDateStr;
                    startDateInput.min = minDateStr;
                    startDateInput.max = maxDateStr;
                    endDateInput.min = minDateStr;
                    endDateInput.max = maxDateStr;
                    
                    const minFormatted = new Date(minDate.year, minDate.month - 1).toLocaleDateString('de-DE', { year: 'numeric', month: 'long' });
                    const maxFormatted = new Date(maxDate.year, maxDate.month - 1).toLocaleDateString('de-DE', { year: 'numeric', month: 'long' });
                    availableDateRange.textContent = `${minFormatted} - ${maxFormatted}`;
                    
                    updateEstimatedRecords();
                }
            }
            
            // Update estimated records based on form inputs using real server data
            function updateEstimatedRecords() {
                const startDate = startDateInput.value;
                const endDate = endDateInput.value;
                const includeRevenue = document.getElementById('includeRevenue').checked;
                const includeExpenses = document.getElementById('includeExpenses').checked;
                
                if (!startDate || !endDate || (!includeRevenue && !includeExpenses)) {
                    estimatedRecords.innerHTML = '<span class="text-warning">0</span> Datensätze';
                    return;
                }
                
                // Show loading state
                estimatedRecords.innerHTML = `
                    <span class="loading-spinner-sm me-2"></span>
                    Wird berechnet...
                `;
                
                // Get real estimated count from server
                const exportOptions = {
                    startDate: startDate,
                    endDate: endDate,
                    includeRevenue: includeRevenue,
                    includeExpenses: includeExpenses,
                    exportFormat: document.querySelector('input[name="exportFormat"]:checked')?.value || 'standard'
                };
                
                // Get anti-forgery token from modal form
                const token = document.querySelector('#csvExportForm input[name="__RequestVerificationToken"]')?.value;
                
                fetch('/Index?handler=GetEstimatedRecordCount', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(exportOptions)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        estimatedRecords.innerHTML = `
                            <span class="fw-bold text-premium-primary">${data.count.toLocaleString('de-DE')}</span> 
                            <span class="text-premium-muted">Datensätze</span>
                        `;
                    } else {
                        estimatedRecords.innerHTML = '<span class="text-danger">Fehler bei Berechnung</span>';
                    }
                })
                .catch(error => {
                    console.error('Error getting estimated records:', error);
                    estimatedRecords.innerHTML = '<span class="text-warning">Schätzung nicht verfügbar</span>';
                });
            }
            
            // Format descriptions
            const formatDescriptions = {
                standard: 'Komma-getrennte Werte mit Punkt als Dezimaltrennzeichen (International)',
                german: 'Semikolon-getrennte Werte mit Komma als Dezimaltrennzeichen (Excel Deutschland)'
            };
            
            // Update format description
            function updateFormatDescription() {
                const selectedFormat = document.querySelector('input[name="exportFormat"]:checked')?.value || 'standard';
                formatDescription.textContent = formatDescriptions[selectedFormat];
            }
            
            // Modal show event - initialize data
            csvExportModal.addEventListener('show.bs.modal', function() {
                initializeDateRange();
                updateFormatDescription();
                
                // Animate modal elements
                setTimeout(() => {
                    document.querySelectorAll('.export-section').forEach((section, index) => {
                        section.style.animationDelay = `${index * 100}ms`;
                        section.classList.add('animate-in-left');
                    });
                }, 100);
            });
            
            // Form input event listeners
            startDateInput.addEventListener('change', updateEstimatedRecords);
            endDateInput.addEventListener('change', updateEstimatedRecords);
            document.getElementById('includeRevenue').addEventListener('change', updateEstimatedRecords);
            document.getElementById('includeExpenses').addEventListener('change', updateEstimatedRecords);
            
            // Format radio button changes
            document.querySelectorAll('input[name="exportFormat"]').forEach(radio => {
                radio.addEventListener('change', updateFormatDescription);
            });
            
            // Form submission with progress tracking
            exportForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                if (!exportForm.checkValidity()) {
                    exportForm.classList.add('was-validated');
                    return;
                }
                
                // Validate at least one transaction type is selected
                const hasSelectedType = document.querySelector('input[name="transactionTypes"]:checked');
                if (!hasSelectedType) {
                    alert('Bitte wählen Sie mindestens einen Transaktionstyp aus.');
                    return;
                }
                
                // Validate date range
                const startDate = new Date(startDateInput.value);
                const endDate = new Date(endDateInput.value);
                if (startDate > endDate) {
                    alert('Das Startdatum muss vor dem Enddatum liegen.');
                    return;
                }
                
                startExport();
            });
            
            // Start export process with progress animation
            function startExport() {
                // Hide modal content and show progress
                document.querySelector('.modal-body').style.display = 'none';
                document.querySelector('.modal-footer').style.display = 'none';
                progressOverlay.classList.remove('d-none');
                
                // Start progress animation
                simulateExportProgress();
            }
            
            // Simulate export progress with realistic timing
            function simulateExportProgress() {
                const totalRecordsText = estimatedRecords.textContent.match(/\d+/)?.[0] || '100';
                const totalRecords = parseInt(totalRecordsText.replace(/\./g, ''));
                
                let progress = 0;
                let processedRecords = 0;
                const startTime = Date.now();
                
                document.getElementById('totalRecords').textContent = totalRecords.toLocaleString('de-DE');
                
                const progressInterval = setInterval(() => {
                    // Realistic progress curve (fast start, slower middle, fast end)
                    const increment = progress < 20 ? 3 : progress < 80 ? 1.5 : 4;
                    progress += increment + (Math.random() * 2);
                    
                    if (progress > 100) progress = 100;
                    
                    processedRecords = Math.floor((progress / 100) * totalRecords);
                    
                    // Update circular progress
                    const circle = document.querySelector('.circle');
                    const circumference = 2 * Math.PI * 15.9155;
                    const dashOffset = circumference - (progress / 100) * circumference;
                    circle.style.strokeDasharray = `${circumference}, ${circumference}`;
                    circle.style.strokeDashoffset = dashOffset;
                    
                    // Update UI elements
                    document.getElementById('progressPercentage').textContent = Math.round(progress) + '%';
                    document.getElementById('processedRecords').textContent = processedRecords.toLocaleString('de-DE');
                    
                    // Update estimated time
                    const elapsed = Date.now() - startTime;
                    if (progress > 5) {
                        const estimatedTotal = (elapsed / (progress / 100));
                        const remaining = Math.max(0, estimatedTotal - elapsed);
                        document.getElementById('estimatedTime').textContent = 
                            remaining < 1000 ? '<1s' : Math.round(remaining / 1000) + 's';
                    }
                    
                    // Progress descriptions
                    const descriptions = [
                        'Daten werden aus der Datenbank geladen...',
                        'Transaktionen werden gefiltert...',
                        'CSV-Format wird generiert...',
                        'Deutsche Formatierung wird angewendet...',
                        'Datei wird zum Download vorbereitet...',
                        'Export erfolgreich abgeschlossen!'
                    ];
                    
                    const descIndex = Math.min(Math.floor(progress / 20), descriptions.length - 1);
                    document.getElementById('progressDescription').textContent = descriptions[descIndex];
                    
                    if (progress >= 100) {
                        clearInterval(progressInterval);
                        setTimeout(() => {
                            completeExport();
                        }, 1000);
                    }
                }, 200);
            }
            
            // Complete export and trigger actual download
            function completeExport() {
                // Create export options object
                const exportOptions = {
                    startDate: startDateInput.value,
                    endDate: endDateInput.value,
                    includeRevenue: document.getElementById('includeRevenue').checked,
                    includeExpenses: document.getElementById('includeExpenses').checked,
                    exportFormat: document.querySelector('input[name="exportFormat"]:checked').value
                };
                
                // Get anti-forgery token from modal form
                const token = document.querySelector('#csvExportForm input[name="__RequestVerificationToken"]')?.value;
                
                // Perform actual CSV export via fetch
                fetch('/Index?handler=ExportCsvWithOptions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(exportOptions)
                })
                .then(response => {
                    if (response.ok) {
                        // Success - handle file download
                        return response.blob().then(blob => {
                            // Create download link
                            const url = window.URL.createObjectURL(blob);
                            const link = document.createElement('a');
                            link.href = url;
                            
                            // Get filename from response headers or create default
                            const contentDisposition = response.headers.get('content-disposition');
                            let filename = `BWA-Export-${exportOptions.startDate}-${exportOptions.endDate}.csv`;
                            if (contentDisposition) {
                                const filenameMatch = contentDisposition.match(/filename="(.+)"/i);
                                if (filenameMatch) {
                                    filename = filenameMatch[1];
                                }
                            }
                            
                            link.download = filename;
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                            window.URL.revokeObjectURL(url);
                            
                            // Show success message
                            document.querySelector('.progress-title').textContent = 'Export erfolgreich!';
                            document.getElementById('progressDescription').innerHTML = `
                                <i class="bi bi-check-circle-fill text-success me-2"></i>
                                Ihre Datei wurde erfolgreich generiert und heruntergeladen.
                            `;
                            
                            console.log('🚀 CSV export completed successfully:', filename);
                        });
                    } else {
                        // Handle error response
                        return response.json().then(errorData => {
                            throw new Error(errorData.error || 'Export fehlgeschlagen');
                        });
                    }
                })
                .then(() => {
                    // Auto-close modal after success
                    setTimeout(() => {
                        bootstrap.Modal.getInstance(csvExportModal).hide();
                    }, 2000);
                })
                .catch(error => {
                    console.error('Export error:', error);
                    
                    // Show error message
                    document.querySelector('.progress-title').textContent = 'Export fehlgeschlagen';
                    document.getElementById('progressDescription').innerHTML = `
                        <i class="bi bi-exclamation-triangle-fill text-danger me-2"></i>
                        ${error.message || 'Ein Fehler ist beim Export aufgetreten. Bitte versuchen Sie es erneut.'}
                    `;
                    
                    // Auto-close modal after error display
                    setTimeout(() => {
                        bootstrap.Modal.getInstance(csvExportModal).hide();
                    }, 3000);
                });
            }
            
            // Reset modal when hidden
            csvExportModal.addEventListener('hidden.bs.modal', function() {
                document.querySelector('.modal-body').style.display = 'block';
                document.querySelector('.modal-footer').style.display = 'flex';
                progressOverlay.classList.add('d-none');
                exportForm.classList.remove('was-validated');
                
                // Reset progress
                document.querySelector('.circle').style.strokeDasharray = '0, 100';
                document.getElementById('progressPercentage').textContent = '0%';
                document.querySelector('.progress-title').textContent = 'Export läuft...';
                
                // Remove animation classes
                document.querySelectorAll('.export-section').forEach(section => {
                    section.classList.remove('animate-in-left');
                    section.style.animationDelay = '';
                });
            });
            
            // Premium button hover effects
            document.querySelectorAll('.btn-premium-toggle').forEach(btn => {
                btn.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-1px)';
                });
                btn.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                });
            });
            
            console.log('Premium CSV Export Modal initialized ✨');
        });
    </script>
    
    <!-- Premium Upload Styles -->
    <style>
        .upload-zone {
            border: 2px dashed var(--color-neutral-300);
            border-radius: var(--radius-xl);
            transition: all var(--timing-normal) var(--easing-ease-out);
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }
        
        .upload-zone:hover {
            border-color: var(--color-primary);
            background-color: var(--color-primary-alpha);
            transform: translateY(-1px);
        }
        
        .upload-zone.drag-over {
            border-color: var(--color-primary) !important;
            background-color: var(--color-primary-alpha) !important;
            transform: scale(1.02);
        }
        
        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }
        
        .btn-ready {
            animation: pulse 2s infinite;
        }
        
        .upload-area.is-invalid .upload-zone {
            border-color: var(--color-danger);
            background-color: var(--color-danger-alpha);
        }
        
        .insight-item:hover {
            transform: translateY(-2px);
            transition: transform var(--timing-normal) var(--easing-ease-out);
            box-shadow: var(--shadow-md);
        }
        
        .month-indicator {
            transition: all var(--timing-normal) var(--easing-ease-out);
        }
        
        .table-premium tbody tr:hover .month-indicator {
            background-color: var(--color-primary) !important;
            color: white !important;
            transform: scale(1.1);
        }
        
        .empty-state-icon {
            animation: float 3s ease-in-out infinite;
        }
        
        @@keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        @@keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(26, 54, 93, 0.4); }
            70% { box-shadow: 0 0 0 10px rgba(26, 54, 93, 0); }
            100% { box-shadow: 0 0 0 0 rgba(26, 54, 93, 0); }
        }
        
        .border-top-2 {
            border-top: 2px solid var(--color-neutral-300) !important;
        }
        
        .bg-neutral-subtle {
            background-color: var(--color-neutral-100) !important;
        }
        
        .text-neutral {
            color: var(--color-neutral-600) !important;
        }
    </style>
}